name: Default Workflow
on:
  push:
    branches:
      - '**'

env:
  repository: ghcr.io/userlane/tool-external-images

jobs:
  Prepare:
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    outputs:
      images: ${{ steps.images.outputs.images }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Prepare the Matrix
        id: images
        run: |
          IMAGES=""
          for i in *; do
            if [ -d "$i" ] && [ -e "$i/Dockerfile" ]; then
              if [ -z "$IMAGES" ]; then
                IMAGES="$i"
              else
                IMAGES="$IMAGES,$i"
              fi
            fi
          done
          echo "images=$(echo -n $IMAGES | jq -R -c 'split(",")')" >> $GITHUB_OUTPUT

  Build:
    needs: Prepare
    timeout-minutes: 20
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.Prepare.outputs.images) }}
    name: Build ${{ matrix.image }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.repository }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Extract Image Tag from Dockerfile
        id: extract_tag
        run: |
          IMAGE=$(awk '/^FROM / {print $2; exit}' "${{ matrix.image }}/Dockerfile" | cut -d':' -f1)
          TAG=$(awk '/^FROM / {print $2; exit}' "${{ matrix.image }}/Dockerfile" | cut -d':' -f2)
          echo "image=$IMAGE" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_ENV
      - name: Push container
        run: |
          echo -e "\e[32m*****\n\e[32mChecking if Image already exists\n\e[32m*****\e[0m"
          if docker manifest inspect ${{ env.repository }}/${{ matrix.image }}:${{ env.tag }} >/dev/null; then
            echo "Image already exists."
            exit 0
          else
            docker pull ${{ env.image }}:${{ env.tag }}
            docker tag ${{ env.image }}:${{ env.tag }} ${{ env.repository }}/${{ matrix.image }}:${{ env.tag }}
            docker push ${{ env.repository }}/${{ matrix.image }}:${{ env.tag }}          
          fi
